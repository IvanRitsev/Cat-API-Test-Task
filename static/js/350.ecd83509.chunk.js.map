{"version":3,"file":"static/js/350.ecd83509.chunk.js","mappings":"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","sources":["hooks/store.ts","components/CatCard.tsx","store/thunks/fetchCats.ts","services/CatsService.ts","components/CatsFilter.tsx","components/Pagination.tsx","pages/CatsPage.tsx"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch } from \"react-redux\";\r\nimport { AppDispatch, RootState } from \"../store/store\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport const useCustomDispatch = () => useDispatch<AppDispatch>();\r\nexport const useCustomSelector: TypedUseSelectorHook<RootState> = useSelector;","import React, { useRef } from 'react';\r\nimport { Cat } from '../store/types/types';\r\nimport IconSvgSelector from '../assets/icons/IconSvgSelector';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\ninterface CatCardProps {\r\n    cat: Cat;\r\n    onDelete: () => void;\r\n    onLike: () => void;\r\n}\r\n\r\nconst CatCard: React.FC<CatCardProps> = ({ cat, onDelete, onLike }) => {\r\n    const buttonContainer = useRef<HTMLDivElement | null>(null);\r\n    const navigate = useNavigate();\r\n\r\n    const handleCardClick = () => {\r\n        navigate(`/products/${cat.breeds[0].name}`);\r\n    }\r\n\r\n    const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    return (\r\n        <div onClick={handleCardClick} className='cat-card'>\r\n            <img src={cat.url} alt={cat.breeds[0].name} />\r\n            <h3>{cat.breeds[0].name}</h3>\r\n            <p>{cat.breeds[0].description}</p>\r\n            <div ref={buttonContainer} className='button-container'>\r\n                <button\r\n                    className='remove-button'\r\n                    onClick={(event) => {\r\n                        handleButtonClick(event);\r\n                        onDelete(); \r\n                    }}>\r\n                    <IconSvgSelector id={'remove-icon'} />\r\n                </button>\r\n                <button\r\n                    onClick={(event) => {\r\n                        handleButtonClick(event);\r\n                        onLike();\r\n                    }}\r\n                    className={cat.liked ? 'like-button liked' : 'like-button'}>\r\n                    <IconSvgSelector id={'like-icon'} />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(CatCard);\r\n","import { getCats } from \"../../services/CatsService\";\r\nimport { CatsSlice } from \"../slices/CatSlice\";\r\nimport { AppDispatch } from \"../store\";\r\n\r\nexport const fetchCats = () => async (dispatch: AppDispatch) => {\r\n\r\n    try {\r\n        dispatch(CatsSlice.actions.fetchCats())\r\n        const res = await getCats();\r\n        if (res.status === 200) {\r\n            dispatch(CatsSlice.actions.fetchCatsSuccess(res))\r\n        }\r\n        else {\r\n            dispatch(CatsSlice.actions.fetchCatsError(res))\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n        \r\n    }\r\n    \r\n}","import axios, { AxiosResponse } from \"axios\";\r\nimport { Cats } from \"../store/types/types\";\r\n\r\nexport const getCats = async (): Promise<AxiosResponse<Cats>> => {\r\n    try {\r\n        const response = await axios.get<Cats>(`https://api.thecatapi.com/v1/images/search?limit=50&has_breeds=1&lang=ru&api_key=live_iUz3xBRZfipCJCIU76AfXZjLFx2vjG0vY4Qzp4KrPUKM611CiikqN4eeG9c9uZ0z`);\r\n        return response;\r\n    } catch (error) {\r\n        console.error('Error fetching cats:', error);\r\n        throw error;\r\n    }\r\n};\r\n","import React from 'react';\r\nimport { useCustomDispatch } from '../hooks/store';\r\nimport { setFilter } from '../store/slices/CatSlice';\r\n\r\ninterface CatsFilterProps {\r\n    filter: 'all' | 'liked';\r\n    onFilterChange: (filter: 'all' | 'liked') => void;\r\n}\r\n\r\nconst CatsFilter: React.FC<CatsFilterProps> = ({ filter, onFilterChange }) => {\r\n    const dispatch = useCustomDispatch();\r\n\r\n    const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const newFilter = e.target.value as 'all' | 'liked';\r\n        dispatch(setFilter(newFilter));\r\n        onFilterChange(newFilter);\r\n    };\r\n\r\n    return (\r\n        <div className='cats-filter'>\r\n            <div\r\n                className='cats-filter__title'\r\n                onClick={() => {\r\n                    document.querySelector('.cats-filter__options')?.classList.toggle('active');\r\n                    document.querySelector('.cats-filter__title')?.classList.toggle('active-filter');\r\n                }}\r\n            >\r\n                Фильтр по {filter === 'all' ? 'всем' : 'избранным'}\r\n            </div>\r\n            <div className='cats-filter__options'>\r\n                <label>\r\n                    <input\r\n                        onChange={handleFilterChange}\r\n                        value='all'\r\n                        name='cats'\r\n                        type='radio'\r\n                        checked={filter === 'all'}\r\n                    />{' '}\r\n                    Все\r\n                </label>\r\n                <label>\r\n                    <input\r\n                        onChange={handleFilterChange}\r\n                        value='liked'\r\n                        name='cats'\r\n                        type='radio'\r\n                        checked={filter === 'liked'}\r\n                    />{' '}\r\n                    Избранные\r\n                </label>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CatsFilter;\r\n","import React from 'react';\r\n\r\ninterface PaginationProps {\r\n    cardsPerPage: number ;\r\n    totalCards: number;\r\n    paginate: (pageNumber: number) => void;\r\n    currentPage: number;\r\n}\r\n\r\nconst Pagination: React.FC<PaginationProps> = ({ cardsPerPage, totalCards, paginate, currentPage }) => {\r\n    const pageNumbers = [];\r\n\r\n    for (let i = 1; i <= Math.ceil(totalCards / cardsPerPage); i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className='pagination'>\r\n                <button\r\n                    onClick={() => paginate(currentPage - 1)}\r\n                    disabled={currentPage === 1}\r\n                >\r\n                    Назад\r\n                </button>\r\n                {pageNumbers.map((number) => (\r\n                    <button className={`${number === currentPage ? 'active' : ''}`} key={number} onClick={() => paginate(number)}>\r\n                       {number}\r\n                    </button>\r\n                ))}\r\n                <button\r\n                    onClick={() => paginate(currentPage + 1)}\r\n                    disabled={currentPage === pageNumbers.length}\r\n                >\r\n                    Вперед\r\n                </button>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Pagination;","import React, { memo, useCallback, useEffect, useMemo, useState } from 'react';\r\nimport CatCard from '../components/CatCard';\r\nimport { useCustomDispatch, useCustomSelector } from '../hooks/store';\r\nimport { fetchCats } from '../store/thunks/fetchCats';\r\nimport { removeCat, setFilter, toggleLike } from '../store/slices/CatSlice';\r\nimport CatsFilter from '../components/CatsFilter';\r\nimport Pagination from '../components/Pagination';\r\nimport IconSvgSelector from '../assets/icons/IconSvgSelector';\r\n\r\nconst CatsPage: React.FC = () => {\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [cardsPerPage] = useState(9);\r\n\r\n    const dispatch = useCustomDispatch();\r\n    const { cats, filter, isLoading } = useCustomSelector(state => state.CatsSliceReducer);\r\n\r\n    // Мемоизация отфильтрованных котов\r\n    const filteredCats = useMemo(() => {\r\n        return filter === 'all' ? cats : cats.filter(cat => cat.liked);\r\n    }, [cats, filter]);\r\n\r\n    const lastCardIndex = currentPage * cardsPerPage;\r\n    const firstCardIndex = lastCardIndex - cardsPerPage;\r\n    const currentCards = filteredCats.slice(firstCardIndex, lastCardIndex);\r\n\r\n    useEffect(() => {\r\n        if (filteredCats.length === 0) {\r\n            dispatch(fetchCats());\r\n        }\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        // Сброс текущей страницы при изменении фильтра\r\n        setCurrentPage(1);\r\n    }, [filter]);\r\n\r\n    const handleFilterChange = useCallback((newFilter: 'all' | 'liked') => {\r\n        dispatch(setFilter(newFilter));\r\n    }, [dispatch]);\r\n\r\n    const paginate = (pageNumber: number) => {\r\n        setCurrentPage(pageNumber);\r\n    }\r\n\r\n    return (\r\n        <div className='cats-page'>\r\n            <div className=\"container\">\r\n                <CatsFilter filter={filter} onFilterChange={handleFilterChange} />\r\n                {isLoading ? <div className='loading'><IconSvgSelector id='loading-spinner'/></div> : null}\r\n                {!isLoading && filteredCats.length === 0 && <div className='liked-cats-undefind'>Избранных котов нет</div>}\r\n                {!isLoading && filteredCats.length > 0 &&\r\n                   <>\r\n                    <div className='cards'>\r\n                        {currentCards.map((cat) => (\r\n                            <CatCard\r\n                                key={cat.id}\r\n                                cat={cat}\r\n                                onLike={() => dispatch(toggleLike(cat.id))}\r\n                                onDelete={() => dispatch(removeCat(cat.id))}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                    <Pagination\r\n                        cardsPerPage={cardsPerPage}\r\n                        totalCards={filteredCats.length}\r\n                        paginate={paginate}\r\n                        currentPage={currentPage}\r\n                    />\r\n                    </>\r\n                }\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(CatsPage);\r\n"],"names":["useCustomDispatch","useDispatch","useCustomSelector","useSelector","CatCard","_ref","cat","onDelete","onLike","buttonContainer","useRef","navigate","useNavigate","handleButtonClick","event","stopPropagation","_jsxs","onClick","handleCardClick","breeds","name","className","children","_jsx","src","url","alt","description","ref","IconSvgSelector","id","liked","React","fetchCats","async","dispatch","CatsSlice","actions","res","axios","get","error","console","getCats","status","fetchCatsSuccess","fetchCatsError","log","filter","onFilterChange","handleFilterChange","e","newFilter","target","value","setFilter","_document$querySelect","_document$querySelect2","document","querySelector","classList","toggle","onChange","type","checked","cardsPerPage","totalCards","paginate","currentPage","pageNumbers","i","Math","ceil","push","_Fragment","disabled","map","number","length","CatsPage","setCurrentPage","useState","cats","isLoading","state","CatsSliceReducer","filteredCats","useMemo","lastCardIndex","firstCardIndex","currentCards","slice","useEffect","useCallback","CatsFilter","toggleLike","removeCat","Pagination","pageNumber","memo"],"sourceRoot":""}